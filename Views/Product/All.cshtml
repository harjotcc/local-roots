@using local_roots.Models
@model IEnumerable<Product>

@{
    ViewData["Title"] = "Products";
}

<style>
    /* Grid & Cards (your existing styles) */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 2rem;
        margin: 2rem 0;
        padding: 2rem 1rem;
        border-radius: 1rem;
    }
    .product-card {
        background: #fff;
        border-radius: 0.7rem;
        box-shadow: 0 2px 8px rgba(60,60,60,0.10);
        padding: 1.2rem 1rem 1.5rem 1rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        transition: box-shadow 0.2s, transform 0.2s;
        border: 2px solid transparent;
    }
    .product-card:hover {
        box-shadow: 0 4px 24px rgba(60,60,60,0.18);
        border-color: #42D3B9;
        transform: translateY(-4px) scale(1.03);
    }
    .product-card img {
        width: 100%;
        max-height: 160px;
        object-fit: cover;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        background: #f3f3f3;
        border: 2px solid #ffc9de;
    }
    .product-price {
        color: #42D3B9;
        font-size: 1.4rem;
        font-weight: bold;
        margin-bottom: 0.3rem;
        text-align: center;
    }
    .product-rating {
        display: flex;
        align-items: center;
        gap: 0.4rem;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }
    .star-full, .star-empty, .star-half {
        font-size: 1.2em;
        width: 1.2em;
        height: 1.2em;
        display: inline-block;
        line-height: 1.2em;
        position: relative;
    }
    .star-full {
        color: #c9d342;
    }
    .star-empty {
        color: #ccc;
    }
    .star-half {
        color: #ccc;
    }
    /* half‑star: overlay a half‑colored star */
    .star-half:before {
        content: '★';
        position: absolute;
        left: 0;
        top: 0;
        width: 50%;
        overflow: hidden;
        color: #c9d342;
    }
    .num-raters {
        color: #888;
        font-size: 0.9em;
    }
    .product-name {
        font-weight: 700;
        text-align: center;
        color: #333;
        font-size: 1.1rem;
        margin: 0.4rem 0 0.2rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 100%;
    }
    .product-desc {
        color: #666;
        font-size: 0.95rem;
        text-align: center;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        min-height: 2.6em;
        max-width: 95%;
        margin-bottom: 1rem;
    }
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        width: 100%;
        justify-content: center;
        margin-top: auto;
    }
    .btn-view, .btn-cart {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 2rem;
        font-size: 0.75rem;
        font-weight: 500;
        text-align: center;
        border: none;
        cursor: pointer;
        text-decoration: none;
        box-shadow: 0 1px 4px rgba(60,60,60,0.10);
        transition: background 0.2s ease;
    }
    .btn-view {
        background: #b5b5b5;
        color: #fff;
    }
    .btn-cart {
        background: #42D3B9;
        color: #fff;
    }
    .btn-cart:hover, .btn-view:hover {
        background: #d3427a;
    }
</style>

@functions {
    string GetStars(double rating)
    {
        int fullStars = (int)rating;
        bool halfStar = (rating - fullStars) >= 0.5;
        int emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        var sb = new System.Text.StringBuilder();
        for (int i = 0; i < fullStars; i++)
            sb.Append("<span class=\"star-full\">★</span>");
        if (halfStar)
            sb.Append("<span class=\"star-half\">★</span>");
        for (int i = 0; i < emptyStars; i++)
            sb.Append("<span class=\"star-empty\">★</span>");
        return sb.ToString();
    }
}

<div class="product-grid">
    @foreach (var product in Model)
    {
        double rating = 0; // default
        int raters = 0;
        if (product.Reviews != null && product.Reviews.Any())
        {
            rating = product.Reviews.Average(r => r.Rating);
            raters = product.Reviews.Count();
        }
        <div class="product-card">
            <img src="@product.ImageUrl"
                 alt="@product.Name"
                 onerror="this.onerror=null;this.src='/images/def-product.png';" />
            <div class="product-price">@product.Price.ToString("C")</div>
           
          @if (raters != 0)
            {
                <div class="product-rating">
                    @Html.Raw(GetStars(rating))
                    <span>@rating.ToString("0.0")</span>
                    <span class="num-raters">(@raters)</span>
                </div>
            }
            else
            {
                <div class="product-rating">
                    <span class="text-muted">No ratings yet</span>
                </div>

            }


            <div class="product-name">@product.Name</div>
            <div class="product-desc">@product.Description</div>
            <div class="action-buttons">
                <a href="@Url.Action("Details", "Product", new { id = product.Id })" class="btn-view">View</a>
                <form method="post" asp-controller="Customer" asp-action="AddToCart" style="display:inline;">
                    <input type="hidden" name="id" value="@product.Id" />
                    <button type="submit" class="btn-cart">Add to Cart</button>
                </form>
            </div>
        </div>
    }
</div>
